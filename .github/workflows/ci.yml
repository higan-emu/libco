name: CI

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: amd64
            flags: -O3 -fomit-frame-pointer
          - target: x86
            flags: -m32 -O3 -fomit-frame-pointer
    steps:
      - uses: actions/checkout@v3
      - name: Prepare
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update -q -y
          sudo apt-get install -y gcc-multilib g++-multilib valgrind libc6-dbg libc6-dbg:i386 libgcc-s1:i386
      - name: Build
        working-directory: doc/examples
        run: |
          cc ${{ matrix.flags }} -std=c89 -Wdeclaration-after-statement -I../.. -o libco.o -c ../../libco.c
          c++ ${{ matrix.flags }} -I../.. -c test_timing.cpp
          c++ ${{ matrix.flags }} -o test_timing libco.o test_timing.o
          c++ ${{ matrix.flags }} -I../.. -c test_args.cpp
          c++ ${{ matrix.flags }} -o test_args libco.o test_args.o
          c++ ${{ matrix.flags }} -I../.. -c test_serialization.cpp
          c++ ${{ matrix.flags }} -o test_serialization libco.o test_serialization.o
      - name: Run examples
        working-directory: doc/examples
        run: |
          ./test_args
          ./test_timing
          ./test_serialization
      - name: Run valgrind
        working-directory: doc/examples
        run: |
          ./valgrind-wrapper.sh ./test_args
          ./valgrind-wrapper.sh ./test_timing
          ./valgrind-wrapper.sh --expect-failure ./test_serialization

  build-qemu:
    name: ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: arm
            arch: armv7
          - target: aarch64
            arch: aarch64
          - target: ppc64v2
            arch: ppc64le
    steps:
      - uses: actions/checkout@v3
      - uses: uraimo/run-on-arch-action@v2
        with:
          arch: ${{ matrix.arch }}
          distro: ubuntu_latest
          install: |
            apt-get update -q -y
            apt-get install -q -y --no-install-recommends build-essential valgrind
          env: |
            # Valgrind on arm will fail if the stack size is larger than 8MB.
            # Set QEMUs stack size to 8MB since Github runners use 16MB default.
            QEMU_STACK_SIZE: 8388608
          run: |
            cd doc/examples
            ./build.sh
            ./test_args
            ./test_timing
            ./test_serialization
            ./valgrind-wrapper.sh ./test_args
            ./valgrind-wrapper.sh --expect-failure ./test_serialization
            # test_timing not run with valgrind on qemu since it's very slow.

  build-qemu-ppc:
    name: ppc
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Prepare
        run: |
          sudo apt-get update -q -y
          sudo apt-get install -y qemu binfmt-support qemu-user-static
      - name: Register QEMU as executor via binfmt_misc
        uses: addnab/docker-run-action@v3
        with:
          image: multiarch/qemu-user-static:register
          options: --privileged
      - name: Build and run tests in a PowerPC container
        uses: addnab/docker-run-action@v3
        with:
          image: lpenz/debian-jessie-powerpc:latest
          # Valgrind on Debian Jessie powerpc requires <= 8MB stack size to work.
          # Set QEMUs stack size to 8MB since Github runners use 16MB default.
          options: -v ${{ github.workspace }}:/work -e QEMU_STACK_SIZE=8388608
          run: |
            sed -i 's;http://deb.debian.org;http://archive.debian.org;' /etc/apt/sources.list
            apt-get update -q -y
            apt-get install -y --allow-unauthenticated build-essential valgrind
            cd /work/doc/examples
            ./build.sh
            ./test_args
            ./test_timing
            # Serialization not supported
            ./valgrind-wrapper.sh ./test_args
            # test_timing not run with valgrind on qemu since it's very slow.

  build-posix:
    name: ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: setjmp
            file: sjlj.c
            defines: -D_FORTIFY_SOURCE=0
          - target: ucontext
            file: ucontext.c
            defines:
    steps:
      - uses: actions/checkout@v3
      - name: Prepare
        run: |
          sudo apt-get install -y valgrind
      - name: Build
        working-directory: doc/examples
        env:
          FLAGS: -O3 -fomit-frame-pointer
        run: |
          cc ${{ matrix.defines }} -std=c89 -Wdeclaration-after-statement $FLAGS -I../.. -o libco.o -c ../../${{ matrix.file }}
          c++ $FLAGS -I../.. -c test_timing.cpp
          c++ $FLAGS -o test_timing libco.o test_timing.o
          c++ $FLAGS -I../.. -c test_args.cpp
          c++ $FLAGS -o test_args libco.o test_args.o
          # Serialization not supported
      - name: Run examples
        working-directory: doc/examples
        run: |
          ./test_args
          # test_timing not run for ucontext since it's very slow.
          if [ "${{ matrix.target }}" != "ucontext" ]; then
            ./test_timing
          fi
      - name: Run valgrind
        working-directory: doc/examples
        run: |
          if [ "${{ matrix.target }}" == "setjmp" ]; then
            # Valgrind error "Invalid write of size 8" (why?)
            ./valgrind-wrapper.sh --expect-failure ./test_args
            ./valgrind-wrapper.sh --expect-failure ./test_timing
          else
            # test_timing not run for ucontext since it's very slow.
            ./valgrind-wrapper.sh ./test_args
          fi

  build-windows:
    name: Windows (${{ matrix.arch }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, x86]
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
      - uses: actions/checkout@v3
      - name: Build
        working-directory: doc/examples
        run: |
          # __STDC__ required for `alignas` (or using /Za)
          cl /I ../.. /Zc:__STDC__ /c ../../libco.c
          cl /I ../.. test_args.cpp libco.obj
          cl /I ../.. test_timing.cpp libco.obj
          cl /I ../.. test_serialization.cpp libco.obj
      - name: Run examples
        working-directory: doc/examples
        run: |
          ./test_args.exe
          ./test_timing.exe
          ./test_serialization

  build-windows-fibers:
    name: Windows (fibers)
    runs-on: windows-latest
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - uses: actions/checkout@v3
      - name: Build
        working-directory: doc/examples
        run: |
          # __STDC__ required for `alignas` (or using /Za)
          cl /I ../.. /Zc:__STDC__ /Folibco /c ../../fiber.c
          cl /I ../.. test_args.cpp libco.obj
          cl /I ../.. test_timing.cpp libco.obj
          # Serialization not supported
      - name: Run examples
        working-directory: doc/examples
        run: |
          ./test_args.exe
          ./test_timing.exe

  sanitizers:
    name: ${{ matrix.sanitizer }}-sanitizer
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sanitizer: [thread, undefined, leak, address]
    steps:
      - uses: actions/checkout@v3
      - name: Build and run examples
        working-directory: doc/examples
        env:
          FLAGS: -fsanitize=${{ matrix.sanitizer }} -fno-sanitize-recover=all -fno-omit-frame-pointer
        run: |
          clang $FLAGS -std=c89 -Wdeclaration-after-statement -I../.. -o libco.o -c ../../libco.c
          clang++ $FLAGS -I../.. -c test_timing.cpp
          clang++ $FLAGS -o test_timing libco.o test_timing.o
          clang++ $FLAGS -I../.. -c test_args.cpp
          clang++ $FLAGS -o test_args libco.o test_args.o
          clang++ $FLAGS -I../.. -c test_serialization.cpp
          clang++ $FLAGS -o test_serialization libco.o test_serialization.o
          ./test_args
          ./test_timing
          ./test_serialization
